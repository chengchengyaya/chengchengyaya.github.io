<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cheng&#39;s blog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 13 Apr 2023 08:42:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>test</title>
      <link>http://example.com/2023/04/13/test/</link>
      <guid>http://example.com/2023/04/13/test/</guid>
      <pubDate>Thu, 13 Apr 2023 07:44:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\begin{bmatrix}
0 &amp;amp; \cdots &amp;amp; 0 \\
\vdots &amp;amp; \ddots &amp;amp; \vdots \\
0 &amp;amp; \cdots &amp;amp; 0
\en</description>
        
      
      
      
      <content:encoded><![CDATA[<p><span class="math display">\[\begin{bmatrix}0 &amp; \cdots &amp; 0 \\\vdots &amp; \ddots &amp; \vdots \\0 &amp; \cdots &amp; 0\end{bmatrix}\]</span></p><p><span class="math inline">\(\begin{bmatrix} 0 &amp; \cdots &amp; 0 \\\vdots &amp; \ddots &amp; \vdots \\ 0 &amp; \cdots &amp; 0\end{bmatrix}\)</span></p><p><span class="math display">\[\begin{matrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end{matrix}\]</span></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/04/13/test/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>多项式、复数、快速傅里叶变换FFT(Fast Fourier Transform)、卷积</title>
      <link>http://example.com/2023/04/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E3%80%81%E5%A4%8D%E6%95%B0%E3%80%81%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2FFT-Fast-Fourier-Transform/</link>
      <guid>http://example.com/2023/04/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E3%80%81%E5%A4%8D%E6%95%B0%E3%80%81%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2FFT-Fast-Fourier-Transform/</guid>
      <pubDate>Wed, 12 Apr 2023 15:49:06 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;前言-premise&quot;&gt;前言 Premise&lt;/h1&gt;
&lt;p&gt;本篇文章参考了许多内容，特别是&lt;a
href=&quot;https://zhuanlan.zhihu.com/p/31584464&quot;&gt;一小时学会快速傅里叶变换&lt;/a&gt;和&lt;a
href=&quot;https://zhuanlan.zhihu.com/p/347091298&quot;&gt;快速傅里叶变换（FFT）超详解&lt;/a&gt;，目的是整理思路，也会用到一点线性代数。所有参考内容，会附在文章后。如果能优化文章也会更新。
# FFT是什么
FFT是一项能快速计算离散傅里叶变换(DFT)的算法，时间复杂度为&lt;span
class=&quot;math inline&quot;&gt;\(O(nlogn)\)&lt;/span&gt;.多用来加速两个同次的多项式乘法。
该算法于1965年由J.W.Cooley和T.W.Tukey提出。所以也可以叫Cooley-Tukey算法。
不知道什么是离散傅里叶变换也无所谓。下面通过考虑从计算多项式乘积的方式出发，看看是怎么做到这个复杂度的。</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="前言-premise">前言 Premise</h1><p>本篇文章参考了许多内容，特别是<ahref="https://zhuanlan.zhihu.com/p/31584464">一小时学会快速傅里叶变换</a>和<ahref="https://zhuanlan.zhihu.com/p/347091298">快速傅里叶变换（FFT）超详解</a>，目的是整理思路，也会用到一点线性代数。所有参考内容，会附在文章后。如果能优化文章也会更新。# FFT是什么FFT是一项能快速计算离散傅里叶变换(DFT)的算法，时间复杂度为<spanclass="math inline">\(O(nlogn)\)</span>.多用来加速两个同次的多项式乘法。该算法于1965年由J.W.Cooley和T.W.Tukey提出。所以也可以叫Cooley-Tukey算法。不知道什么是离散傅里叶变换也无所谓。下面通过考虑从计算多项式乘积的方式出发，看看是怎么做到这个复杂度的。<span id="more"></span> # 什么是多项式，什么是多项式乘积，思路从哪开始？n次多项式指的就是这么一个式子<spanclass="math inline">\(f(x)=a_0+a_1x+a_2x^2+...+a_{n-1}x^{n-1}\)</span>.其中<spanclass="math inline">\(a_0,a_1,a_2,...,a_{n-1}\)</span>都是系数呀。</p><p>两个多项式乘积就是，假如一个叫<spanclass="math inline">\(A(x)\)</span>一个叫<spanclass="math inline">\(B(x)\)</span>,系数分别是<spanclass="math inline">\(a\)</span>和<spanclass="math inline">\(b\)</span>，那么表示出来就是<spanclass="math inline">\((AB)(x)=A(x)\timesB(x)=(a_0+a_1x+a_2x^2+...+a_{n-1}x^{n-1})(b_0+b_1x+b_2x^2+...+b_{n-1}x^{n-1})=\sum_{i=0}^na_ix^{i-1}\sum_i=0^nb_{i-1}x^{i-1}\)</span>.</p><p>我们要求的结果就是这个新的多项式的各项系数。而由已知的两个多项式的系数得到这个结果的过程也被叫做卷积，所以学会了这个同时也就学会了如何快速计算卷积。</p><p>在接下来的推导中需要用到的多项式的两种表示方式，被叫做系数表示和点值表示。对于一个普通的n-1次多项式，可以写成<spanclass="math inline">\(f(x)=\sum_{i=0}^{n-1}a_{i}x^{i}\)</span>。为了留下它的信息，可以把它的系数拿出来，组成<spanclass="math inline">\((a_0,a_1,...,a_{n-1})\)</span>,的形式。或者，通过一个结论，即n-1次多项式上n个不同的点能唯一确定这个多项式。意思是我们可以往一个n-1次多项式里边带n个值，组成<spanclass="math inline">\({(x_0,f(x_0)),(x_1,f(x_1)),...,(x_{n-1},f(n-1))}\)</span>这样一个式子，虽然我们没有得到想要的结果，但是系数的信息还是被保存下来了，如果我们想还是能从里面得出系数的.这样两种表示方法，就能留下我们想要表示的多项式的信息。接下来我们考虑用代码实现一下两个n次多项式<spanclass="math inline">\(A(x),B(x)\)</span>相乘，其得到的结果为<spanclass="math inline">\(C(x)\)</span>.最简单的思路大概是两层循环，遍历得到结果，如<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i&lt;n; i++)</span><br><span class="line">for(int j = 0; j&lt;n; i++) &#123;</span><br><span class="line">c[i+j] += a[i] * b[j]; //这里存的是系数 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 时间复杂度是<spanclass="math inline">\(O(n^2)\)</span>的。我们也可以说这是通过确定<spanclass="math inline">\(C(x)\)</span>的各项系数，来确定结果。好处是思路比较直接，坏处是时间太长了。那么如果我们先得到它的n个值呢？这样我们就需要先得到已知的两个多项式的n个值，再分别相乘。假设我们已经得到了已知的两个多项式的点值表示。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i&lt;n; i++) &#123;</span><br><span class="line">c[i] += a[i] * b[i]; //这里存的是带的n个值啦</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 时间复杂度是<spanclass="math inline">\(O(n)\)</span>。当然了，这样考虑过于简单了，比如我们至少还要回答如何求出已知的两个多项式的n个值。但这提示我们如果通过先计算所谓的点值表示，再想办法转化为系数，是否能改进<spanclass="math inline">\(O(n^2)\)</span>的时间复杂度？同时，我们还有一个问题，该选什么作为代入的n个值？</p><p>假如站在结论回头看，这里就是思路的出发点。总体来说分为三步，第一步是得到两个已知多项式的点值表示，第二步是对应相乘得到我们想要的多项式的点值表示，第三步是想办法将它转化成系数表示。我们把第一步叫做离散傅里叶变换DFT(DiscretFourier Transform)，第三步叫离散傅里叶逆变换(Inverse Discret FourierTransform)。另外，代入的n个值，最终选择了单位根-复平面上的单位圆上平均分布的n个点。我们先介绍一点单位根。# 单位根 单位根是在复平面上平均分布的n个点，记作<spanclass="math inline">\(\omega_n\)</span>，在<spanclass="math inline">\((1,0)\)</span>处的叫<spanclass="math inline">\(\omega_n^0\)</span>,辐角(就是角度啦)为正且最小的是<spanclass="math inline">\(\omega_n^1\)</span>,依次还有<spanclass="math inline">\(\omega_n^2\omega_n^3...\omega_n^n\)</span>,而<spanclass="math inline">\(\omega_n^n\)</span>其实也在(1,0)处。之后能做出这个图的话应该会补图。</p><p>不过，写成这样明显是不好表示的，不过因为它是在圆上的，所以我们也可以写成<spanclass="math inline">\(\omega_n^k=cos\theta+isin\theta=cos(k\frac{2\pi}{n})+isin(k\frac{2\pi}{n})\)</span>.这个式子，结合复数相加好像向量相加的性质来看，它的实部加上虚部，很自然就是我们的单位根。同样也可以通过对<spanclass="math inline">\(e^{ik\frac{n}{2}}\)</span>泰勒展开得到。因为实际上单位根也可以写成前面这个东西。</p><p>单位根的上下标自然也是可以随便换的。不是非要n和k，下标可以理解成均分的个数，而上标可以理解成选的第几个点，0就是起点，1就是第一个点，不过如果上标超过下标，那就说明多选了一圈或很多圈呗。又因为复数相乘，表现上好像向量的角度相加了，长度变为两个向量的模长相乘。所以说单位根有个幂，只会改变角度，长度乘完还是1，也就是说还是单位根.比如<spanclass="math inline">\((\omega_n^1)^2=(\omega_n^2)^1\)</span>.所以单位根的幂跟上标也好像能组合一样。</p><p>往下推导我们要用到两个性质，第一条叫做折半引理，是说<spanclass="math inline">\(\omega_{2n}^{2k}=\omega_n^k\)</span>,不就是说，你均分和选的点的个数同时倍增或倍减，选的点还是一样嘛,所以进一步我们也可以说<spanclass="math inline">\(\omega_{mn}^{mk}=\omega_{n}^{k}\)</span>。第二条叫做消去引理，长这样<spanclass="math inline">\(\omega_n^{k+\frac{n}{2}}=-\omega_n^k\)</span>,那就是说多往后选一半的点,也就是说转半圈，跟<spanclass="math inline">\(\omega_n^k\)</span>所在终点不是关于原点对称的，那我们给它整体乘个负号就好了。证明这两个性质当然也可以去展开，但是没什么意思，就不写了。 # 第一步离散傅里叶变换 DFT 先随便考虑一个多项式<spanclass="math inline">\(f(x)=a_0+a_1x+a_2x^2+...+a_{n-2}x^{n-2}+a_{n-1}x^{n-1}\)</span>.我们按项数的奇偶给它分类，那就变成</p><p><spanclass="math display">\[\begin{align}f(x)=(a_0+a_2x^2+...+a_{n-2}x^{n-2})+(a_1x+...+a_{n-1}x^{n-1})\\=(a_0+a_2x^2+...+a_{n-2}x^{n-2})+x(a_1+...+a_{n-1}x^{n-2})\end{align}\]</span></p><p>如果我们进一步对左右都奇偶分类，改写成这样的形式呢？即使是分成了四部分，还是可以继续再分成八部分，最终分为很多层。这就让人联想到递推或者递归。记左边的为<spanclass="math inline">\(f_1(x)\)</span>,右边的为<spanclass="math inline">\(f_2(x)\)</span>,每一次的递推就形如<spanclass="math inline">\(f(x)=f_1(x)+xf_2(x)\)</span>.不过为了利用单位根的性质,最好每次递推都能让下标变小，联想到折半引理，我们希望代进去后有个次数，变成<spanclass="math inline">\(f(x)=f_1(x^2)+xf_2(x^2)\)</span>，那么把左边和右边式子里面的<spanclass="math inline">\(x\)</span>的次数降一级就能实现了,延续一开始的式子，新的<spanclass="math inline">\(f_1(x)=a_0+a_2x+...+a_{n-2}x^{n-3}\)</span>,而新的<spanclass="math inline">\(f_2(x)=a_1+...+a_{n-1}x^{n-3}\)</span>.</p><p>考虑每个单位根，对于上半圆上的点，有<spanclass="math inline">\(f(\omega_n^k)=f_1(\omega_n^{2k})+\omega_n^kf_2(\omega_n^{2k})=f_1(\omega_{\frac{n}{2}}^{k})+\omega_n^kf_2(\omega_{\frac{n}{2}}^k),(k&lt;\frac{n}{2})\)</span>。而对于下半圆来说，<spanclass="math inline">\(、\)</span>.既然写成这样了，就可以递归去解出每个点并加在一起，比如<spanclass="math inline">\(f(\omega_n^1)=f_1(\omega_{\frac{n}{2}}^1)+\omega_n^1f_2(\omega_{\frac{n}{2}}^1)\)</span>,而进一步<spanclass="math inline">\(f_1(\omega_{\frac{n}{2}}^1)=f_1(\omega_{\frac{n}{4}}^1)+\omega_{\frac{n}{2}}^1f_1(\omega_{\frac{n}{4}}^1)\)</span>,<spanclass="math inline">\(f_2(\omega_{\frac{n}{2}}^1)=f_2(\omega_{\frac{n}{4}}^1)+\omega_{\frac{n}{2}}^1f_2(\omega_{\frac{n}{4}}^1)\)</span>.就像这样去一直分，下标不断除二，直到<spanclass="math inline">\(\omega_1^1\)</span>,而这个东西其实就是1.就好像说你把圆分成了1份而不是n份了，我们只有在<spanclass="math inline">\((1,0)\)</span>这的一个点，这样你上标不管是几，也就是说选的是第几个点，都只能选在<spanclass="math inline">\((1,0)\)</span>这个点，也就是说<spanclass="math inline">\(\omega_1^k=1,k\in N^+\)</span>。</p><p>分析一下时间复杂度，对于求每个点值表示，例如<spanclass="math inline">\(f(\omega_{n}^1)\)</span>, 第<spanclass="math inline">\(1\)</span>步往下分下标会变成<spanclass="math inline">\(\dfrac{n}{2}\)</span>,第<spanclass="math inline">\(2\)</span>步往下分下标会变成<spanclass="math inline">\(\dfrac{n}{4}\)</span>,自然第<spanclass="math inline">\(k\)</span>步下标就变成<spanclass="math inline">\(\cfrac{n}{2^k}\)</span>,可是我们只想让它变成<spanclass="math inline">\(1\)</span>,那么只要做<spanclass="math inline">\(\log_{2}{n}\)</span>步就好了,时间复杂度即<spanclass="math inline">\(O(logn)\)</span>。但我们得求n次才行，所以总的时间复杂度就是<spanclass="math inline">\(O(nlogn)\)</span>.或者由master公式<spanclass="math inline">\(T(n)=2T(\frac{n}{2})+O(n)=O(nlogn)\)</span>.</p><p>这部分就叫做离散傅里叶变换，代码实现一下。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void FFT(complex&lt;double&gt; *a, int n, int inv) //n是现在的下标,inv是inverse，即逆的意思，先不用管这层，关键是也作为虚部的符号</span><br><span class="line">&#123;</span><br><span class="line">if(n == 1) //只有一份就不继续分啦，直接返回</span><br><span class="line">return;</span><br><span class="line">int mid = n / 2; </span><br><span class="line">complex&lt;double&gt; f1[mid + 1], f2[mid + 1];</span><br><span class="line">for(int i = 0; i &lt;= n; i += 2) // 按照奇偶分项</span><br><span class="line">&#123;</span><br><span class="line">f1[i/2] = a[i];               </span><br><span class="line">f2[i/2] = a[i+1];</span><br><span class="line">&#125;</span><br><span class="line">FFT(f1, mid, inv); //递归分治</span><br><span class="line">FFT(f2, mid, inv);</span><br><span class="line">complex&lt;double&gt; w0(1, 0), wn(cos(2*pi/n)), inv *sin(2*pi\n);</span><br><span class="line">for(int i = 0; i &lt; mid; ++i, w0 *=wn)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = f1[i] + w0 * f2[i];</span><br><span class="line">a[i + n\2] = f1[i] - w0 * f2[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> # 第二步对应相乘，得到所求多项式的点值表示 随便写一下 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt;= len; ++i)</span><br><span class="line">a[i] = a[i] * b[i];</span><br></pre></td></tr></table></figure> # 第三步离散傅里叶逆变换 IDFT现在我们得到了所求多项式的点值表示，而在第一步中，我们是对已知的两个多项式都应用了离散傅里叶逆变换，那么我们当然也可以对要求的多项式应用啦。先来看看如何用矩阵来表示求点值表示的过程。<span class="math display">\[\begin{align} \begin{bmatrix}1 &amp; 1&amp; 1 &amp; \cdots &amp; 1 \\1 &amp; (\omega_n^1)^1 &amp;(\omega_n^1)^2 &amp; \cdots &amp; (\omega_n^1) ^ {n-1}\\1 &amp;(\omega_n^2)^1 &amp; (\omega_n^2)^2 &amp; \cdots &amp; (\omega_n^2) ^{n-1} \\ \vdots &amp; \vdots &amp;\vdots &amp; \ddots &amp; \vdots \\ 1&amp; (\omega_n^{n-1})^1 &amp; (\omega_n^{n-1})^2 &amp; \cdots &amp;(\omega_n^{n-1}) ^ {n-1}\end{bmatrix} \begin{bmatrix}a_0 \\ a _ 1 \\ a _2 \\ \vdots \\ a _ {n-1}\\ \end{bmatrix} = \begin{bmatrix}y_0 \\ y _ 1\\ y _ 2 \\ \vdots \\ y _ {n-1}\\ \end{bmatrix}\quad\\ \end{align}\]</span></p><p>这个表示没有奇偶分类等过程，不过我们求的时候会用到来简化。最左边的矩阵是我们带的值，中间的矩阵是系数矩阵，最右边的矩阵是代值得到的结果矩阵，也就是点值表示。那么，如果我们想解出系数表示，也就是第二个矩阵，就要找到最左边矩阵的逆矩阵，并且两边左乘这个逆矩阵。直接给出这个逆矩阵 <span class="math display">\[\begin{align}\frac1n\begin{bmatrix}1&amp;1&amp;1&amp;\cdots&amp;1\\1&amp;(\omega_n^{n-1})^1&amp;({\omega_n^{n-1}})^2&amp;\cdots&amp;(\omega_{n}^{n-1})^{n-1}\\1&amp;(\omega_n^{n-2})^1&amp;({\omega_n^{n-2}})^2&amp;\cdots&amp;(\omega_{n}^{n-2})^{n-1}\\\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\1&amp;(\omega_n^1)^1&amp;{(\omega_n^1)}^2&amp;\cdots&amp;(\omega_{n}^1)^{n-1}\end{bmatrix}\\\end{align}\]</span> 这就是说 <span class="math display">\[\begin{align}\frac1n\begin{bmatrix}1 &amp; 1 &amp; 1 &amp; \cdots &amp; 1 \\1 &amp;(\overline{\omega_n^1})^1 &amp; (\overline{\omega_n^1})^2 &amp; \cdots&amp; (\overline{\omega_n^1}) ^ {n-1}\\1 &amp; (\overline{\omega_n^2})^1&amp; (\overline{\omega_n^2})^2 &amp; \cdots &amp;(\overline{\omega_n^2}) ^ {n-1} \\ \vdots &amp; \vdots &amp;\vdots &amp;\ddots &amp; \vdots \\ 1 &amp; \overline{(\omega_n^{n-1}})^1 &amp;(\overline{\omega_n^{n-1}})^2 &amp; \cdots &amp;(\overline{\omega_n^{n-1}}) ^ {n-1}\end{bmatrix}\begin{bmatrix}y_0 \\ y_ 1 \\ y _ 2 \\ \vdots \\ y _ {n-1}\\ \end{bmatrix}=\begin{bmatrix}a_0\\ a _ 1 \\ a _ 2 \\ \vdots \\ a _ {n-1}\\ \end{bmatrix}\\\end{align}\\\]</span>形式上，是跟DFT相似的，所以我们只需要重复利用一下DFT的部分，当然是改造过的版本。# 代码 贴一下 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LuoguP3803</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">1</span> &lt;&lt; <span class="number">22</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>, pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">complex&lt;<span class="type">double</span>&gt; a[NR], b[NR]; <span class="comment">//complex为C++自带虚数</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(complex&lt;<span class="type">double</span>&gt; *a, <span class="type">int</span> n, <span class="type">int</span> inv)</span> <span class="comment">//inv为虚部符号，inv为1时FFT，inv为-1时IFFT</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="comment">//如果需要转换的只有一项就直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = n / <span class="number">2</span>;</span><br><span class="line">    complex&lt;<span class="type">double</span>&gt; A1[mid + <span class="number">1</span>], A2[mid + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i += <span class="number">2</span>) <span class="comment">//拆分多项式</span></span><br><span class="line">    &#123;</span><br><span class="line">        A1[i / <span class="number">2</span>] = a[i];</span><br><span class="line">        A2[i / <span class="number">2</span>] = a[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FFT</span>(A1, mid, inv); <span class="comment">//递归分治</span></span><br><span class="line">    <span class="built_in">FFT</span>(A2, mid, inv);</span><br><span class="line">    <span class="function">complex&lt;<span class="type">double</span>&gt; <span class="title">w0</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">wn</span><span class="params">(cos(<span class="number">2</span> * pi / n), inv * sin(<span class="number">2</span> * pi / n))</span></span>; <span class="comment">//单位根</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mid; ++i, w0 *= wn)                               <span class="comment">//合并多项式</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = A1[i] + w0 * A2[i];</span><br><span class="line">        a[i + n / <span class="number">2</span>] = A1[i] - w0 * A2[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) <span class="comment">//输入第一个多项式</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line">        a[i].<span class="built_in">real</span>(x); <span class="comment">//complex类型变量.real(x)意味着将实数部赋为x，real()返回实数部值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) <span class="comment">//输入第二个多项式</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line">        b[i].<span class="built_in">real</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span> &lt;&lt; <span class="built_in">max</span>((<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="built_in">log2</span>(n + m)), <span class="number">1</span>); <span class="comment">//由于FFT需要项数为2的整数次方倍，所以多项式次数len为第一个大于n+m的二的正整数次方</span></span><br><span class="line">    <span class="built_in">FFT</span>(a, len, <span class="number">1</span>);                                <span class="comment">//系数表达转点值表达</span></span><br><span class="line">    <span class="built_in">FFT</span>(b, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len; ++i)</span><br><span class="line">        a[i] = a[i] * b[i];                       <span class="comment">//O(n)乘法</span></span><br><span class="line">    <span class="built_in">FFT</span>(a, len, <span class="number">-1</span>);                              <span class="comment">//点值表达转系数表达</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i)              <span class="comment">//输出</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.0f &quot;</span>, a[i].<span class="built_in">real</span>() / len + eps); <span class="comment">//记得要除n，eps为解决掉精度问题</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> # 分析递归过程并利用蝴蝶操作优化 之后再写。# 参考资料 <ahref="https://zhuanlan.zhihu.com/p/31584464">一小时学会快速傅里叶变换（FastFourier Transform）</a> <ahref="https://www.bilibili.com/video/BV1G4411D7kZ/?spm_id_from=333.999.0.0&amp;vd_source=0143f5056c728cce33d658b3ff5db3f4">【官方双语】微分方程概论-第五章：在3.14分钟内理解e^iπ</a><ahref="https://zhuanlan.zhihu.com/p/347091298">快速傅里叶变换（FFT）超详解</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Algorithm-learning/">-Algorithm learning</category>
      
      
      <category domain="http://example.com/tags/algorithm/">-algorithm</category>
      
      
      <comments>http://example.com/2023/04/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E3%80%81%E5%A4%8D%E6%95%B0%E3%80%81%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2FFT-Fast-Fourier-Transform/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
